generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Status {
  WAITING_FOR_SHIPPING
  IN_SHIPPING
  DELIVERED
  RECEIVED
  CANCELLED
}

enum Locale {
  en
  pl
}

model Order {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  locale          Locale 
  sessionId       String          @unique
  formValues      FormValues
  cart            CartItem[]
  cartId          String          @unique
  price           Int
  deliveryFee     Int
  paid            Boolean         @default(false)
  status          Status          @default(WAITING_FOR_SHIPPING)
  createdAt       DateTime        @default(now())
}

model Category {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String      @unique
  slug            String      @unique
  namePl          String?
  archived        Boolean     @default(false) /// Set to true when deleted by administrator but kept in the db to ensure compatibility with older orders
  Products        Product[]
}

model Product {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String      @unique
  slug              String      @unique
  namePl            String?
  price             Float
  description       String?
  descriptionPl     String?
  categoryId        String      @db.ObjectId
  category          Category    @relation(fields: [categoryId], references: [id])
  archived          Boolean     @default(false) /// Removes product from public pages but keeps it in db to work with older orders
  imageUrl          String?
  imageStoredInFs   Boolean?
  cartItem          CartItem[]
  featured          Boolean?
}


enum ShippingMethod {
  CLOSE_DELIVERY
  COURIER
  PARCEL_MACHINE
  PICKUP_AT_STORE
}


model CartItem {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  quantity        Int
  product         Product     @relation(fields: [productId], references: [id])
  productId       String      @db.ObjectId
  order           Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String      @db.ObjectId
}

type FormValues {
  name            String
  email           String
  phone           String
  company         String?
  address         String
  postalCode      String
  town            String
  extraInfo       String?
  shippingMethod  ShippingMethod
}
